,controversiality,parent_id,body,subreddit,id,score,subreddit_id
1710868,0,t1_cjt4p6i,There is RefCounted which is basically sharedptr. The uniqueptr case is more difficult,d_language,cjutf18,2,t5_2qhwx
1714859,0,t3_2e234n,Announcement text quoteHi everyoneLDC .. the LLVMbased D compiler is available for download!This release is based on the .. frontend and standard library and supports LLVM ... OS X .. only.As usual you can find links to the changelog and the binary packages over at digitalmars.D.ldcRegardsKai,d_language,cjvbj6w,2,t5_2qhwx
3618049,0,t1_cq40a1z,Better libraries would be helpful. The MySQL package is nice to have and a worthy goal but it isnt developed as well as similar packages in other languages. This is a common issue with D right now in my opinion.,d_language,cq4ome9,3,t5_2qhwx
6861146,0,t3_49qtj3,Hello everyoneI have spent the last two weeks porting the date string parsing functionality from the popular Python library dateutil to D. I have written about my experience here The code and docs can be found here reddit Let me know what you think about the article and the code.Thanks in advance.,d_language,d0u0qqb,1,t5_2qhwx
7399162,0,t3_4gob1b,HiI just wanted to share some experience of using D in industry.Recently my little company released version . of our flagship product Video Enhancer a video processing application for Windows and this time its written in D.Couple of screenshotsVersion  was born like  years ago and was of course written in C. It consisted of main GUI executable and  dynamically loaded DirectShow filters. For GUI version  used MFC and a thirdparty skinning engine. This skinning engine had its own problems but since we didnt have its sources we couldnt fix them meanwhile its author disappeared in sands of time. So when time has come to create version  I chose the best available language and an open source GUI library with  control and customizability  DLangUI. Overall Im pretty happy with this choice.Version  is quite different from v in feature set and internal structure its not a direct translation. It consists of two executables running in tandem one does GUI the other deals with video and  dynamically loaded DirectShow filters. Both main executables are purely in D while the DirectShow filters are still in C. Heavy number crunching including our main feature  motionbased video upscaler  is still in C because of heavy SIMD usage and Intel compiler.Main executable of version  was K lines of C half of which were libraries like pugixml and full build took  seconds.Main executables of version  are in total .K lines of D of which K are auto generated by IDLD tool and full build of GUI app takes  seconds and the worker app builds in  seconds so thats a really nice improvement.Thanks to Phobos we dont need many libraries things like XML parsing ZIP unpacking and many others are all covered by the standard library. Only two additional libraries were used Cerealed for serialization of messages the two processes exchange and DLangUI.Some things to reflect onCompilerCompiler used is DMD . bit target. Video Enhancer supports  plugins from VirtualDub and they happen to be bit so our app has to be bit too. Speed of code generated by DMD is more than enough even debug builds were fast enough. The default linker is used not the MS one and I was worried there might be some troubles with antivirus false positives that happened before when using optlink but no everything went smooth and no problems with optlink arose whatsoever.IDEVisual Studio  with VisualD. Ive used this combo for many years generally quite successively. Last year its D parser had some problems that made it crash on code that used DLangUI and that was painful. I even made a patch that made the crash silent so VisualD would silently reload the parser and continue working. It worked but luckily authors of D parser and VisualD quickly found the crash cause and fixed it since then everything works smoothly out of the box. I like how well DML works there with syntax highlighting and autocompletionBuildsWere not using Dub to build the app it tends to be slow and rebuild dependencies too often or maybe I just havent learnt to use it properly. Instead we use Dub to build the libraries and produce .lib files then reference libraries sources and lib files in VisualD project of the main apps and then use VisualDs simple building process that just invokes DMD.CerealedThis compiletimeintrospectionbased serializaition lib is really great powerful and easy to use. Were probably using an old version havent updated for some time and the version we use sometimes had problems serializing certain types like bool IIRC so sometimes we had to tweak our message types to make it compile but most of the time it just works.DLangUIVery nice library. Documentation is very sparse though so learning to use DLangUI often means reading source code of examples and the lib itself and sometimes even thats not enough and you need to learn some Android basics since it originates from Android world. But once you learn how to use it how to encode what you need in DML a QML counterpart or add required functionality by overriding some method of its class its really great and pleasant to use. Many times I was so happy the source code is available first for learning then for tweaking and fixing bugs. Ive found a few minor bugs and sent a few trivial fixes that were merged quickly. DLangUI is crossplatform and has several backends for drawing and font rendering. Were using its minimal build targeted to use Win API had to tweak dub.json a bit. We dont use OpenGL as its not really guaranteed to work well on any Windows box. Using just WinAPI makes our app smaller more stable and avoids dependencies.Garbage CollectionTotally fine if you know what youre doing. Some people say you cant make responsive GUI apps in GCed languages. Thats a myth. In this application we rely on GC almost as freely as one would in C allocate strings messages widgets and other small litter without having to worry about deallocation and it works well Ive never seen any performance problems related to GC in this app and no GC pauses were visible at all. However this is a bit app and some care must be taken to avoid excessive memory use. Firstly and mainly where bitmaps for GUI elements and video frames are allocated. DLangUI tends to allocate everything in GC heap without second thought and has been allocating some arrays even just to draw some pictures rescaled. If youre resizing a window and it has some big bitmap that gets resized too by default DLangUI tends to just allocate a new buffer for each new size this does not look good in memory section of Task Manager. However if instead of allocating a new ColorDrawBuf for example you use its resize method and dont forget to call assumeSafeAppend for its buffer then it stops eating memory and behaves well even though its still managed no manual management required. In couple of places I did change ordinary arrays to std.container.array to reduce allocations the code did not change much but there was much less work for GC. One such change where it was important allocation during bitmap drawing was merged back to DLangUI so dont worry about that one.COMTo deal with video reading parsing decoding encoding.. we use DirectShow which is COMbased. Ive found a lot of good stuff for working with COM in VisualD sources. There is IDLD utility that converts IDL files from Windows SDK to D source files. We used it actively K lines generated. There is also TLB to IDL converter if you need it I havent tried to use it myself. The way it converts COM interfaces it adds their IIDs GUIDs as a static member of the interface so when you need to QueryInterface you dont need to provide IID for the interface its already there and this is used by the ComPtr smart pointer that deals with most COM stuff like reference counting too. I borrowed initial ComPtr implementation from VisualD and then changed it a lot most importantly my version also checks for errors automatically now I have Error Monad for freeD features used.Apart from the smart pointer above we used compiletime introspection to pass and automatically dispatch messages between two processes there is a blog post about that too. We used User Defined Attributes to describe what to do with errors if they arise in message handlersand then proper error handling was performed automatically no need to repeat it in each method just add one word of annotation and it works.We used std.concurrency message passing to talk between GUI and other threads.We enjoyed the ability to call C interfaces directly from D and D methods from C no FFI required that was really nice and helped a lot.Ability to include binary data as simple as importfile.dat was also very nice. This way we include some images and also bytecode for a little VM generated by a compiler written in OCaml but that is another story.Thats what comes to mind now the rest of the code is quite boring I guess.TLDR at least in some areas D is a fine successor to C and can be used to make real world video processing apps that people around the world use and pay for.,d_language,d2j8i33,2,t5_2qhwx
7536964,0,t3_4il1ej,Hi GuysI have been looking into the DMD now to see what I can do about CTFE.Unfortunately It is a pretty big mess to untangle.Code responsible for CTFE is in at least  files.dinterpret.d ctfeexpr.d constfold.dI was shocked to discover that the PowExpression actually depends on phobos! depending on the exact codePath it may or may not compile...which let to me prematurely stating that it worked at ctfe My Plan is as follows.Add a new file for my ctfeinterpreter and update it gradually to take more and more of the cases the code in the files mentioned above was used for.Do Dataflow analysis on the code that is to be ctfed so we can tell beforehand if we need to store state in the ctfe stack or not.Or baring proper dataflow analysis RefCouting the variables on the ctfestack could also be a solution.I will post more details as soon as I dive deeper into the code.,d_language,d2ywzoo,1,t5_2qhwx
7853263,0,t3_4mh0z0,  it integrates in many IDEs with DCD,d_language,d3yrzh4,2,t5_2qhwx
