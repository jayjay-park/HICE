,controversiality,parent_id,body,subreddit,id,score,subreddit_id
3448071,0,t1_cpl9qjj,You simply reserve some space to store it usually at the beginning of the file.Any file is a series of bytes a stream which can be interpreted by a program to open that file in a proper way. An image viewer knows how to deal with files which have image extensions and the same goes for audio video text etc. That program starts reading the stream at the beginning and the thing goes something like this From byte  to byte  file name. From  to  timestamp From  to  device model SO version author etc. From  to end of flie the data which shall be processed to open the file.If you have  bytes of space to store the file name but you only use say  bytes the program which opens the file knows that the timestamp the next piece of metadata starts at byte . So it keeps reading and doing what its taught to do at every given byte of the stream even if its empty and contains no relevant data.If you wish to go deep on that Id suggest you the Wikipedia article about the Exif,csELI5,cplb1g8,1,t5_2z063
10701235,0,t3_5t1hqk,Certainly not an expert but my general understanding is this. You want to solve a large complex problem maybe an NPgenre problem. As an example Im going to use the Shortest Total Path Length Spanning Tree problem.Say you want to find the lowest cost tree spanning all vertices in a graph. Given a connected graph there should be at least one tree connecting those vertices whose cost is minimized. Now whats important to remember is that given the optimal path from a vertex A to a vertex Z all subsets of the optimal path from A to Z are also optimal paths.This is called the Principle of Optimality subproblems of an optimal solution are themselves a locally optimal solution. This is an important characteristic and problems that dont have this property I dont think are able to be broken up and solved in this subproblem manner.So you calculate the shortest path from A to all neighboring vertices and you store those costs in a data structure so that they dont need calculated again. Now you go over and look at vertex B and you find the shortest paths leading away from it. You do this for all the smallest problems. From there you use the local optimal solutions that youve calculated and stored to find the optimal solutions that are  larger in sizescope. You generate a very large set of very small spanning trees and every one of those trees has a cost that is minimized. As the algorithm progresses you assemble the smaller trees that produce the lowest total cost slightlylarger trees. You find local optimal solutions that span more vertices and the remaining problem set shrinks. Algorithms for accomplishing this can be messy and may not work in a general case.,csELI5,ddjr441,3,t5_2z063
